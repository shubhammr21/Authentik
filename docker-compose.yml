version: '3'

networks:
  proxy:
    external: true

services:

  traefik:
    image: traefik:v2.8
    container_name: traefik
    volumes:
      - ./config/traefik/conf:/etc/traefik
      - ./logs:/var/log
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - proxy
    ports:
      - 80:80
      - 443:443
    logging:
      driver: json-file
      options:
        'max-size': '10m'
        'max-file': '5'
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.traefik-secure.entrypoints=http"
      - "traefik.http.routers.traefik-secure.rule=Host(`traefik.localhost`)"
      # - "traefik.http.routers.traefik-secure.middlewares=simpleAuth@file"
      - "traefik.http.routers.traefik-secure.service=api@internal"
      # - 'traefik.http.routers.traefik-secure.tls=true'
  
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy
      - traefik.http.routers.zipkin.entrypoints=http
      - traefik.http.routers.zipkin.rule=Host(`zipkin.localhost`)
      - traefik.http.routers.zipkin.service=zipkin
      - traefik.http.services.zipkin.loadbalancer.server.port=9411
    restart: unless-stopped
    networks:
      - proxy
  
  mailhog:
    image: mailhog/mailhog:v1.0.0
    container_name: mailhog
    networks:
      - proxy
    ports:
      - "8025:8025"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.mailhog.entrypoints=http"
      - "traefik.http.routers.mailhog.rule=Host(`mail.localhost`)"
      - "traefik.http.routers.mailhog.service=mailhog"
      - "traefik.http.services.mailhog.loadbalancer.server.port=8025"

  postgresql:
    image: docker.io/library/postgres:14-alpine
    restart: unless-stopped
    container_name: authentik-db
    networks:
      - proxy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - database:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${PG_PASS:?database password required}
      - POSTGRES_USER=${PG_USER:-authentik}
      - POSTGRES_DB=${PG_DB:-authentik}
    env_file:
      - .env

  redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    container_name: redis
    restart: unless-stopped
    networks:
      - proxy
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data

  server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2022.9.0}
    restart: unless-stopped
    command: server
    container_name: authentik-server
    networks:
      - proxy
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: authentik-db
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      # AUTHENTIK_ERROR_REPORTING__ENABLED: "true"
    volumes:
      - ./config/authentik/media:/media
      - ./config/authentik/custom-templates:/templates
      - geoip:/geoip
    env_file:
      - .env
    # ports:
    #   - "0.0.0.0:${AUTHENTIK_PORT_HTTP:-9000}:9000"
    #   - "0.0.0.0:${AUTHENTIK_PORT_HTTPS:-9443}:9443"
    labels:
      traefik.enable: true
      traefik.docker.network: proxy
      traefik.http.routers.authentik.entrypoints: http
      traefik.http.routers.authentik.rule: Host(`authentik.localhost`) || HostRegexp(`{subdomain:[a-z0-9]+}.localhost`) && PathPrefix(`/outpost.goauthentik.io/`)
      traefik.http.routers.authentik.service: authentik
      traefik.http.services.authentik.loadbalancer.server.port: 9000

  worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2022.9.0}
    restart: unless-stopped
    container_name: authentik-worker
    command: worker
    networks:
      - proxy
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: authentik-db
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      # AUTHENTIK_ERROR_REPORTING__ENABLED: "true"
    # This is optional, and can be removed. If you remove this, the following will happen
    # - The permissions for the /media folders aren't fixed, so make sure they are 1000:1000
    # - The docker socket can't be accessed anymore
    user: root
    volumes:
      - ./config/authentik/media:/media
      - ./config/authentik/certs:/certs
      - ./config/authentik/custom-templates:/templates
      - /var/run/docker.sock:/var/run/docker.sock
      - geoip:/geoip
    env_file:
      - .env

  whoami:
    image: containous/whoami
    restart: unless-stopped
    container_name: whoami
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.whoami.entrypoints=http"
      - "traefik.http.routers.whoami.rule=Host(`web.localhost`)"
      - "traefik.http.routers.whoami.service=whoami"
      - "traefik.http.routers.whoami.middlewares=authentik@file"
      - "traefik.http.services.whoami.loadbalancer.server.port=80"

  geoipupdate:
    image: "maxmindinc/geoipupdate:latest"
    container_name: authentik-geoipupdate
    networks:
      - proxy
    volumes:
      - "geoip:/usr/share/GeoIP"
    environment:
      GEOIPUPDATE_EDITION_IDS: "GeoLite2-City"
      GEOIPUPDATE_FREQUENCY: "8"
    env_file:
      - .env

volumes:
  database:
    driver: local
  redis:
    driver: local
  geoip:
    driver: local
